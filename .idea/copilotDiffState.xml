<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/unrn/model/Agenda.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/unrn/model/Agenda.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Collections;&#10;import java.util.List;&#10;&#10;class Agenda {&#10;    private final List&lt;Contacto&gt; contactos = new ArrayList&lt;&gt;();&#10;&#10;    Agenda() {&#10;    }&#10;&#10;    void agregarContacto(String nombre, List&lt;NumeroTelefono&gt; telefonos) {&#10;        Contacto nuevo = new Contacto(nombre, telefonos, contactos);&#10;        contactos.add(nuevo);&#10;    }&#10;&#10;    List&lt;Contacto&gt; listarContactos() {&#10;        return Collections.unmodifiableList(contactos);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/unrn/model/Telefono.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/unrn/model/Telefono.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;public class Telefono {&#10;    private final String codigoArea;&#10;    private final String numero;&#10;&#10;    public Telefono(String codigoArea, String numero) {&#10;        if (codigoArea == null || !codigoArea.matches(&quot;\\d{4}&quot;)) {&#10;            throw new RuntimeException(&quot;El código de área debe tener exactamente 4 dígitos&quot;);&#10;        }&#10;        if (numero == null || numero.length() &lt; 6 || numero.length() &gt; 7) {&#10;            throw new RuntimeException(&quot;El número debe tener entre 6 y 7 caracteres&quot;);&#10;        }&#10;        this.codigoArea = codigoArea;&#10;        this.numero = numero;&#10;    }&#10;&#10;    // ...sin getters ni setters...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/unrn/model/AgendaTelefonicaTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/unrn/model/AgendaTelefonicaTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.util.List;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class AgendaTelefonicaTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Agregar un contacto nuevo lo almacena en la agenda&quot;)&#10;    void agregarContactoNuevo_contactoSeAgrega() {&#10;        // Setup&#10;        AgendaTelefonica agenda = new AgendaTelefonica();&#10;        NumeroTelefono telefono = new NumeroTelefono(&quot;2991&quot;, &quot;1234567&quot;);&#10;        // Ejercitación&#10;        agenda.agregarContacto(&quot;Juan&quot;, telefono);&#10;        // Verificación&#10;        List&lt;Contacto&gt; contactos = agenda.listarContactos();&#10;        assertEquals(1, contactos.size(), &quot;Debe haber un contacto en la agenda&quot;);&#10;        assertTrue(contactos.get(0).es(&quot;Juan&quot;), &quot;El contacto agregado debe ser 'Juan'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Agregar un número a un contacto existente lo agrega correctamente&quot;)&#10;    void agregarNumeroAContactoExistente_numeroSeAgrega() {&#10;        // Setup&#10;        AgendaTelefonica agenda = new AgendaTelefonica();&#10;        NumeroTelefono telefono1 = new NumeroTelefono(&quot;2991&quot;, &quot;1234567&quot;);&#10;        NumeroTelefono telefono2 = new NumeroTelefono(&quot;2991&quot;, &quot;7654321&quot;);&#10;        agenda.agregarContacto(&quot;Ana&quot;, telefono1);&#10;        // Ejercitación&#10;        agenda.agregarContacto(&quot;Ana&quot;, telefono2);&#10;        // Verificación&#10;        List&lt;Contacto&gt; contactos = agenda.listarContactos();&#10;        assertEquals(1, contactos.size(), &quot;Debe haber un solo contacto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Listar contactos en agenda vacía devuelve lista vacía&quot;)&#10;    void listarContactos_agendaVacia_listaVacia() {&#10;        // Setup&#10;        AgendaTelefonica agenda = new AgendaTelefonica();&#10;        // Ejercitación&#10;        List&lt;Contacto&gt; contactos = agenda.listarContactos();&#10;        // Verificación&#10;        assertTrue(contactos.isEmpty(), &quot;La lista debe estar vacía si no hay contactos&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;La lista de contactos es solo lectura&quot;)&#10;    void listarContactos_listaSoloLectura() {&#10;        // Setup&#10;        AgendaTelefonica agenda = new AgendaTelefonica();&#10;        NumeroTelefono telefono = new NumeroTelefono(&quot;2991&quot;, &quot;1234567&quot;);&#10;        agenda.agregarContacto(&quot;Pedro&quot;, telefono);&#10;        List&lt;Contacto&gt; contactos = agenda.listarContactos();&#10;        // Verificación&#10;        assertThrows(UnsupportedOperationException.class, () -&gt; contactos.add(new Contacto(&quot;Otro&quot;)), &quot;No se puede modificar la lista de contactos&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/unrn/model/ContactoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/unrn/model/ContactoTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ContactoTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear contacto con nombre válido lo instancia correctamente&quot;)&#10;    void crearContacto_nombreValido_instanciaCorrecta() {&#10;        // Setup &amp; Ejercitación&#10;        Contacto contacto = new Contacto(&quot;Juan&quot;);&#10;        // Verificación&#10;        assertTrue(contacto.es(&quot;Juan&quot;), &quot;El contacto debe tener el nombre 'Juan'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear contacto con nombre mayor a 35 caracteres lanza excepción&quot;)&#10;    void crearContacto_nombreMuyLargo_lanzaExcepcion() {&#10;        // Setup&#10;        String nombreLargo = &quot;a&quot;.repeat(36);&#10;        // Ejercitación &amp; Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Contacto(nombreLargo));&#10;        assertEquals(Contacto.ERROR_NOMBRE_LARGO, ex.getMessage(), &quot;Debe lanzar excepción por nombre largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear contacto con nombre menor a 2 caracteres lanza excepción&quot;)&#10;    void crearContacto_nombreMuyCorto_lanzaExcepcion() {&#10;        // Setup&#10;        String nombreCorto = &quot;A&quot;;&#10;        // Ejercitación &amp; Verificación&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new Contacto(nombreCorto));&#10;        assertEquals(Contacto.ERROR_NOMBRE_CORTO, ex.getMessage(), &quot;Debe lanzar excepción por nombre corto&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Agregar un nuevo número a un contacto lo almacena correctamente&quot;)&#10;    void nuevoNumero_agregaNumero() {&#10;        // Setup&#10;        Contacto contacto = new Contacto(&quot;Ana&quot;);&#10;        NumeroTelefono telefono = new NumeroTelefono(&quot;2991&quot;, &quot;1234567&quot;);&#10;        // Ejercitación&#10;        contacto.nuevoNumero(telefono);&#10;        // Verificación&#10;        assertTrue(contacto.es(&quot;Ana&quot;), &quot;El contacto debe seguir siendo 'Ana'&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;El método es devuelve true si el nombre coincide&quot;)&#10;    void es_nombreCoincide_true() {&#10;        // Setup&#10;        Contacto contacto = new Contacto(&quot;Pedro&quot;);&#10;        // Ejercitación &amp; Verificación&#10;        assertTrue(contacto.es(&quot;Pedro&quot;), &quot;Debe devolver true si el nombre coincide&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;El método es devuelve false si el nombre no coincide&quot;)&#10;    void es_nombreNoCoincide_false() {&#10;        // Setup&#10;        Contacto contacto = new Contacto(&quot;Pedro&quot;);&#10;        // Ejercitación &amp; Verificación&#10;        assertFalse(contacto.es(&quot;Juan&quot;), &quot;Debe devolver false si el nombre no coincide&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/unrn/model/NumeroTelefonoTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/unrn/model/NumeroTelefonoTest.java" />
              <option name="updatedContent" value="package unrn.model;&#10;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class NumeroTelefonoTest {&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear número válido instancia correctamente el objeto&quot;)&#10;    void crearNumero_valido_instanciaCorrecta() {&#10;        // Setup: Preparar el escenario&#10;        // Ejercitación: Ejecutar la acción a probar&#10;        NumeroTelefono numero = new NumeroTelefono(&quot;2991&quot;, &quot;1234567&quot;);&#10;        // Verificación: Verificar el resultado esperado&#10;        assertNotNull(numero, &quot;El número de teléfono debe instanciarse correctamente&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear número con prefijo nulo lanza excepción&quot;)&#10;    void crearNumero_prefijoNulo_lanzaExcepcion() {&#10;        // Setup: Preparar el escenario&#10;        // Ejercitación y Verificación: Ejecutar la acción a probar y verificar el resultado esperado&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new NumeroTelefono(null, &quot;1234567&quot;));&#10;        assertEquals(NumeroTelefono.ERROR_PREFIJO_NULO, ex.getMessage(), &quot;Debe lanzar excepción por prefijo nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear número con número nulo lanza excepción&quot;)&#10;    void crearNumero_numeroNulo_lanzaExcepcion() {&#10;        // Setup: Preparar el escenario&#10;        // Ejercitación y Verificación: Ejecutar la acción a probar y verificar el resultado esperado&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new NumeroTelefono(&quot;2991&quot;, null));&#10;        assertEquals(NumeroTelefono.ERROR_NUMERO_NULO, ex.getMessage(), &quot;Debe lanzar excepción por número nulo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear número con número demasiado largo lanza excepción&quot;)&#10;    void crearNumero_numeroLargo_lanzaExcepcion() {&#10;        // Setup: Preparar el escenario&#10;        String numeroLargo = &quot;12345678&quot;;&#10;        // Ejercitación y Verificación: Ejecutar la acción a probar y verificar el resultado esperado&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new NumeroTelefono(&quot;2991&quot;, numeroLargo));&#10;        assertEquals(NumeroTelefono.ERROR_NUMERO_LARGO, ex.getMessage(), &quot;Debe lanzar excepción por número largo&quot;);&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Crear número con número demasiado corto lanza excepción&quot;)&#10;    void crearNumero_numeroCorto_lanzaExcepcion() {&#10;        // Setup: Preparar el escenario&#10;        String numeroCorto = &quot;12345&quot;;&#10;        // Ejercitación y Verificación: Ejecutar la acción a probar y verificar el resultado esperado&#10;        var ex = assertThrows(RuntimeException.class, () -&gt; new NumeroTelefono(&quot;2991&quot;, numeroCorto));&#10;        assertEquals(NumeroTelefono.ERROR_NUMERO_CORTO, ex.getMessage(), &quot;Debe lanzar excepción por número corto&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>